(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{449:function(t,s,a){"use strict";a.r(s);var i=a(20),e=Object(i.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"了解git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#了解git"}},[t._v("#")]),t._v(" 了解Git")]),t._v(" "),a("h2",{attrs:{id:"版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本控制"}},[t._v("#")]),t._v(" 版本控制")]),t._v(" "),a("ul",[a("li",[t._v("什么是版本控制：版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术\n"),a("ul",[a("li",[t._v("实现跨区域多人协同开发")]),t._v(" "),a("li",[t._v("追踪和记载一个或者多个文件的历史记录")]),t._v(" "),a("li",[t._v("组织和保护你的源代码和文档")]),t._v(" "),a("li",[t._v("统计工作量")]),t._v(" "),a("li",[t._v("并行开发、提高开发效率")]),t._v(" "),a("li",[t._v("跟踪记录整个软件的开发过程")]),t._v(" "),a("li",[t._v("减轻开发人员的负担，节省时间，同时降低人为错误")])])]),t._v(" "),a("li",[t._v("简单说就是用于管理多人协同开发项目的技术")]),t._v(" "),a("li",[t._v("没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题")]),t._v(" "),a("li",[t._v("无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！")]),t._v(" "),a("li",[t._v("多人开发就必须要使用版本控制！否则代价比较大")])]),t._v(" "),a("h3",{attrs:{id:"常见的版本控制工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的版本控制工具"}},[t._v("#")]),t._v(" 常见的版本控制工具")]),t._v(" "),a("ul",[a("li",[t._v("我们学习的东西，一定要是当下最流行的")]),t._v(" "),a("li",[t._v("主流的版本控制器有如下这些：\n"),a("ul",[a("li",[a("strong",[t._v("Git")])]),t._v(" "),a("li",[t._v("SVN（Subversion）")]),t._v(" "),a("li",[t._v("CVS（Concurrent Versions System）")]),t._v(" "),a("li",[t._v("VSS（Microsoft Visual SourceSafe）")]),t._v(" "),a("li",[t._v("TFS（Team Foundation Server）")]),t._v(" "),a("li",[t._v("Visual Studio Online")])])]),t._v(" "),a("li",[t._v("版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN")])]),t._v(" "),a("h3",{attrs:{id:"本地版本控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地版本控制"}},[t._v("#")]),t._v(" 本地版本控制")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("记录文件每次的更新，可以对每一个版本做一个快照，或是记录补丁文件，适合个人用，如RCS")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210501230616069.png",alt:"image-20210501230616069"}})])])]),t._v(" "),a("h3",{attrs:{id:"集中版本控制-svm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中版本控制-svm"}},[t._v("#")]),t._v(" 集中版本控制（SVM）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("所有的版本数据都保存在服务器上，协同开发这从服务器上同步更新或上传自己的修改")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210501230742870.png",alt:"image-20210501230742870"}})])]),t._v(" "),a("li",[a("p",[t._v("所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN，CVS，VSS")])])]),t._v(" "),a("h3",{attrs:{id:"分布式版本控制-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式版本控制-git"}},[t._v("#")]),t._v(" 分布式版本控制（Git）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("缺点：每个人都拥有全部代码，安全隐患（要是跑路怎么办，哈哈哈）")])]),t._v(" "),a("li",[a("p",[t._v("所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需要在联网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的折本没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用")])]),t._v(" "),a("li",[a("p",[t._v("优点：不会因为服务器损坏或者网络问题,造成不能工作的情况")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210501232357430.png",alt:"image-20210501232357430"}})])])]),t._v(" "),a("h3",{attrs:{id:"git和svn主要区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git和svn主要区别"}},[t._v("#")]),t._v(" Git和SVN主要区别")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("SVN是集中式版本控制系统")]),t._v("，版本库是集中放在"),a("strong",[t._v("中央服务器的")]),t._v("，而工作的时候，用的都是自己的电脑，所有首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高")]),t._v(" "),a("li",[a("strong",[t._v("Git是分布式版本控制系统")]),t._v("，没有中央服务器，"),a("strong",[t._v("每个人的电脑就是一个完整的版本库")]),t._v("，工作的时候不需要联网了，因为版本都在自己电脑上。系统的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这是，你们两之间"),a("strong",[t._v("只需把各自的修改推送给对方")]),t._v("，就可以互相看到对方的修改了。"),a("strong",[t._v("Git可以直接看到更新了哪些代码和文件")])]),t._v(" "),a("li",[a("strong",[t._v("Git是目前世界上最先进的分布式版本控制系统")])])]),t._v(" "),a("h3",{attrs:{id:"git历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git历史"}},[t._v("#")]),t._v(" Git历史")]),t._v(" "),a("ul",[a("li",[t._v("同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。")]),t._v(" "),a("li",[t._v("Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。Linux社区中存在很多的大佬！破解研究 BitKeeper ！")]),t._v(" "),a("li",[t._v("到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2周左右！）也就是后来的 Git！")]),t._v(" "),a("li",[a("strong",[t._v("Git是目前世界上最先进的分布式版本控制系统")])]),t._v(" "),a("li",[t._v("Git是免费、开源的，最初Git是为辅助 Linux 内核开发的，来替代 BitKeeper！")])]),t._v(" "),a("h2",{attrs:{id:"git安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git安装"}},[t._v("#")]),t._v(" Git安装")]),t._v(" "),a("ul",[a("li",[t._v("软件下载：打开 [git官网]https://git-scm.com/download/，下载git对应操作系统的版本。")]),t._v(" "),a("li",[t._v("官网下载太慢，我们可以使用淘宝镜像下载：http://npm.taobao.org/mirrors/git-for-windows/")]),t._v(" "),a("li",[t._v("如何卸载：\n"),a("ul",[a("li",[t._v("清理环境变量含有Git的")]),t._v(" "),a("li",[t._v("然后直接卸载")])])]),t._v(" "),a("li",[t._v("如何安装，随机应变，看不懂就下一步")])]),t._v(" "),a("h3",{attrs:{id:"启动git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动git"}},[t._v("#")]),t._v(" 启动Git")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Git Bash")]),t._v("： Unix与Linux风格的命令行，使用最多，推荐最多")]),t._v(" "),a("p",[a("strong",[t._v("Git CMD")]),t._v("： Windows风格的命令行")]),t._v(" "),a("p",[a("strong",[t._v("Git GUI")]),t._v("： 图形界面的Git，不建议初学者使用，尽量先熟悉常用命令")])])]),t._v(" "),a("h3",{attrs:{id:"常用的linux命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的linux命令"}},[t._v("#")]),t._v(" 常用的Linux命令")]),t._v(" "),a("ul",[a("li",[t._v("平时一定要多使用这些基础的命令！")]),t._v(" "),a("li",[t._v("cd : 改变目录。")]),t._v(" "),a("li",[t._v("cd . . 回退到上一个目录，直接cd进入默认目录")]),t._v(" "),a("li",[t._v("pwd : 显示当前所在的目录路径。")]),t._v(" "),a("li",[t._v("ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。")]),t._v(" "),a("li",[t._v("touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。")]),t._v(" "),a("li",[t._v("rm: 删除一个文件, rm index.js 就会把index.js文件删除。")]),t._v(" "),a("li",[t._v("mkdir: 新建一个目录,就是新建一个文件夹。")]),t._v(" "),a("li",[t._v("rm -r : 删除一个文件夹, rm -r src 删除src目录\n"),a("ul",[a("li",[t._v("rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！")])])]),t._v(" "),a("li",[t._v("mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。")]),t._v(" "),a("li",[t._v("reset 重新初始化终端/清屏。")]),t._v(" "),a("li",[t._v("clear 清屏。")]),t._v(" "),a("li",[t._v("history 查看命令历史。")]),t._v(" "),a("li",[t._v("help 帮助。")]),t._v(" "),a("li",[t._v("exit 退出。")]),t._v(" "),a("li",[t._v("#表示注释")])]),t._v(" "),a("h3",{attrs:{id:"git配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git配置"}},[t._v("#")]),t._v(" Git配置")]),t._v(" "),a("ul",[a("li",[t._v("所有的配置文件，其实都保存在本地")]),t._v(" "),a("li",[t._v("查看配置 git config -l")]),t._v(" "),a("li",[t._v("查看不同级别的配置文件：")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看系统config")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --system --list　　\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前用户（global）配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global --list\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[a("p",[a("strong",[t._v("Git相关的配置文件：")])]),t._v(" "),a("ol",[a("li",[t._v("Git\\etc\\gitconfig ：Git 安装目录下的 gitconfig --system 系统级")]),t._v(" "),a("li",[t._v("C:\\Users\\Administrator\\.gitconfig 只适用于当前登录用户的配置 --global 全局")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("设置用户名与邮箱（用户标识，必要）")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你的名字"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#你的邮箱地址")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("只需要做一次这个设置，如果你传递了-global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要-global选项。总之-global为全局配置，不加为某个项目的特定配置")])])])])]),t._v(" "),a("h2",{attrs:{id:"git基本理论-核心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git基本理论-核心"}},[t._v("#")]),t._v(" Git基本理论（核心）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("三个区域\nGit本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage/Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502152015701.png",alt:"image-20210502152015701"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Workspace：工作区，就是你平时存放项目代码的地方")])]),t._v(" "),a("li",[a("p",[t._v("Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息")])]),t._v(" "),a("li",[a("p",[t._v("Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本")])]),t._v(" "),a("li",[a("p",[t._v("Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换")])]),t._v(" "),a("li",[a("p",[t._v("本地的三个区域确切的说应该是git仓库中HEAD指向的版本：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502152808200.png",alt:"image-20210502152808200"}})]),t._v(" "),a("ul",[a("li",[t._v("Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间")]),t._v(" "),a("li",[t._v("WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间")]),t._v(" "),a("li",[t._v(".git：存放Git管理信息的目录，初始化仓库的时候自动创建")]),t._v(" "),a("li",[t._v("Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区")]),t._v(" "),a("li",[t._v("Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）")]),t._v(" "),a("li",[t._v("Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。")])])])])])]),t._v(" "),a("h3",{attrs:{id:"工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("git的工作流程一般是这样的：")]),t._v(" "),a("ol",[a("li",[t._v("在工作目录中添加、修改文件")]),t._v(" "),a("li",[t._v("将需要进行版本管理的文件放入暂存区域")]),t._v(" "),a("li",[t._v("将暂存区域的文件提交到git仓库")])])]),t._v(" "),a("li",[a("p",[t._v("因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502154156693.png",alt:"image-20210502154156693"}})])])]),t._v(" "),a("h3",{attrs:{id:"git项目搭建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git项目搭建"}},[t._v("#")]),t._v(" Git项目搭建")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("创建工作目录与常用指令")])])]),t._v(" "),a("li",[a("p",[t._v("工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文")])]),t._v(" "),a("li",[a("p",[t._v("日常使用只要记住下图6个命令：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502154311867.png",alt:"image-20210502154311867"}})])]),t._v(" "),a("li",[a("p",[t._v("本地仓库搭建")]),t._v(" "),a("ul",[a("li",[t._v("创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("创建全新的仓库，需要用GIT管理的项目的根目录执行：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在当前目录新建一个Git代码库")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等的所有信息都在这个目录里面。")])])])]),t._v(" "),a("li",[a("p",[t._v("克隆远程仓库")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("另一种方式是克隆远程目录，由于是将远程服务器上的仓库完全镜像一份至本地")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#克隆一个项目和它的整个代码历史(版本信息)")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#https://gitee.com/xxx/xxx.git")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("去gitee或者github上克隆一个测试")])])])])]),t._v(" "),a("h3",{attrs:{id:"git文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git文件操作"}},[t._v("#")]),t._v(" Git文件操作")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上")])]),t._v(" "),a("li",[a("p",[t._v("文件的四种状态")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Untracked")]),t._v("：未跟踪，此文件在文件夹中，但并没有加入到git库，不参与版本控制。通过"),a("code",[t._v("git add")]),t._v("状态变为"),a("code",[t._v("Staged")])]),t._v(" "),a("li",[a("strong",[t._v("Unmodify")]),t._v("：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，而变为"),a("code",[t._v("Modified")]),t._v("。如果使用"),a("code",[t._v("git rm")]),t._v("移出版本库，则成为"),a("code",[t._v("Untracked")]),t._v("文件")]),t._v(" "),a("li",[a("strong",[t._v("Modified")]),t._v("：文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过"),a("code",[t._v("git add")]),t._v("可进入暂存"),a("code",[t._v("staged")]),t._v("状态，使用"),a("code",[t._v("git checkout")]),t._v("则丢弃修改过，返回到"),a("code",[t._v("unmodify")]),t._v("状态，这个"),a("code",[t._v("git checkout")]),t._v("即从库中取出文件，覆盖当前修改")]),t._v(" "),a("li",[a("strong",[t._v("Staged")]),t._v("：暂存状态。执行"),a("code",[t._v("git commit")]),t._v("则将修改同步到库中，这时库中的文件和本地文件又变为一致，文件为"),a("code",[t._v("Unmodify")]),t._v("状态。执行"),a("code",[t._v("git reset HEAD filename")]),t._v("取消暂存，文件状态为"),a("code",[t._v("Modified")])])])]),t._v(" "),a("li",[a("p",[t._v("查看文件状态")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看指定文件状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看所有文件状态")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git add .                  添加所有文件到暂存区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#git commit -m "消息内容"    提交暂存区中的内容到本地仓库 -m 提交信息')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("忽略文件")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等")])]),t._v(" "),a("li",[a("p",[t._v('在主目录下建立".gitignore"文件，此文件有如下规则：')]),t._v(" "),a("ol",[a("li",[a("p",[t._v("忽略文件中的空行或以井号（#）开始的行将会被忽略")])]),t._v(" "),a("li",[a("p",[t._v("可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等")])]),t._v(" "),a("li",[a("p",[t._v("如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略")])]),t._v(" "),a("li",[a("p",[t._v("如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略")])]),t._v(" "),a("li",[a("p",[t._v("如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("*.txt        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.txt     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#但lib.txt除外")]),t._v("\n/temp        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#仅忽略项目根目录下的TODO文件,不包括其它目录temp")]),t._v("\nbuild/       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#忽略build/目录下的所有文件")]),t._v("\ndoc/*.txt    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("使用码云")]),t._v(" "),a("ul",[a("li",[t._v("github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的github服务器")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("登录注册码云，完善个人信息https://gitee.com/")])]),t._v(" "),a("li",[a("p",[t._v("设置本机绑定SSH公钥，实现免密码登录！（免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库）")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#进入 C:\\Users\\Administrator\\.ssh 目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#生成公钥")]),t._v("\nssh-keygen\nssh-keygen -t rsa\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("将.ssh下的id_rsa.pub公钥copy到gitee工作台中")])]),t._v(" "),a("li",[a("p",[t._v("创建个人仓库")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502221044465.png",alt:"image-20210502221044465"}})])]),t._v(" "),a("li",[a("p",[t._v("设置开源许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载…等等限制")])]),t._v(" "),a("li",[a("p",[t._v("克隆到本地")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502221819381.png",alt:"image-20210502221819381"}})])])])])]),t._v(" "),a("h3",{attrs:{id:"git删除commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git删除commit"}},[t._v("#")]),t._v(" Git删除commit")]),t._v(" "),a("p",[a("code",[t._v("git rebase -i (HEAD)")])]),t._v(" "),a("ul",[a("li",[t._v("git rebase -i dev 可以将dev分支合并到当前分支")])]),t._v(" "),a("h3",{attrs:{id:"使git与远程仓库关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使git与远程仓库关联"}},[t._v("#")]),t._v(" 使Git与远程仓库关联")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$ git remote add origin https://github.com/xxx/test.git")])])]),t._v(" "),a("h3",{attrs:{id:"git提交到远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git提交到远程仓库"}},[t._v("#")]),t._v(" Git提交到远程仓库")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("$ git push origin")]),t._v(" "),a("ul",[a("li",[t._v("上面命令表示，将当前分支推送到origin主机的对应分支")]),t._v(" "),a("li",[t._v("如果当前分支只有一个追踪分支，那么主机名都可以省略")])])]),t._v(" "),a("li",[a("code",[t._v("$ git push")]),t._v(" "),a("ul",[a("li",[t._v("如果当前分支与多个主机存在追踪关系，那么这个时候-u选项会指定一个默认主机，这样后面就可以不加任何参数使用git push")])])]),t._v(" "),a("li",[a("code",[t._v("$ git push -u origin master")]),t._v(" "),a("ul",[a("li",[t._v("上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了")])])])]),t._v(" "),a("h3",{attrs:{id:"git-gc命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-gc命令"}},[t._v("#")]),t._v(" Git gc命令")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" gc --prune"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("now\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("运行 gc 命令之后，两个 Blob 对象不见了。Git 创建了一个包文件和一个索引文件。包文件中包含了之前的两个 Blob 对象，索引文件中包含了每个对象在包文件中的偏移信息。Git 在打包的过程中使用了增量编码方案（delta encoding），只保存对象的不同版本之间的差异，这使得仓库瘦身成功")]),t._v(" "),a("li",[t._v("实际上，你并不需要手动调用 gc 命令。每当碎片对象过多，或者你向远端服务器发起推送的时候，Git 就会自动执行一次打包过程")])]),t._v(" "),a("h3",{attrs:{id:"清楚git仓库的所有分支的所有操作记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清楚git仓库的所有分支的所有操作记录"}},[t._v("#")]),t._v(" 清楚Git仓库的所有分支的所有操作记录")]),t._v(" "),a("p",[a("code",[t._v("git reflog expire --expire=now --all")])]),t._v(" "),a("h3",{attrs:{id:"清除-git-仓库的所有提交记录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清除-git-仓库的所有提交记录"}},[t._v("#")]),t._v(" 清除 Git 仓库的所有提交记录")]),t._v(" "),a("ol",[a("li",[t._v("缓存所有文件（处理 .gitignore 中声明排除的）\n"),a("code",[t._v("git add .")])]),t._v(" "),a("li",[t._v("提交文件\n"),a("code",[t._v('git commit -am "commit message"')])]),t._v(" "),a("li",[t._v("删除 master 分支\n"),a("code",[t._v("git branch -d master")])]),t._v(" "),a("li",[t._v("重命名当前分支为 master\n"),a("code",[t._v("git branch -m master")])])]),t._v(" "),a("h3",{attrs:{id:"修改远程仓库地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改远程仓库地址"}},[t._v("#")]),t._v(" 修改远程仓库地址")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("先删后加")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("git remote rm origin")]),t._v("（删除远程地址）")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git remote add origin [url]")]),t._v("（‘[]’内为新的git仓库地址，真实写命令时不要带中括号'[]'）")])])])])]),t._v(" "),a("h2",{attrs:{id:"idea集成git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea集成git"}},[t._v("#")]),t._v(" IDEA集成Git")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("新建项目，绑定git。将我们远程的git工程里面的所有文件(包括隐藏文件)"),a("strong",[t._v("拷贝")]),t._v("到目标项目即可")]),t._v(" "),a("ul",[a("li",[t._v("注意观察前后idea中的变化，成功后显示git图标")]),t._v(" "),a("li",[t._v("注意颜色变化，此时红色是说明文件修改没有暂存Modified状态"),a("code",[t._v("git add . *#提交到暂存区*")])])])]),t._v(" "),a("li",[a("p",[t._v("修改文件，使用IDEA操作git")]),t._v(" "),a("ul",[a("li",[t._v("添加到暂存区")]),t._v(" "),a("li",[t._v("commit 提交")]),t._v(" "),a("li",[t._v("push到远程仓库")])])]),t._v(" "),a("li",[a("p",[t._v("提交测试")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"消息"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#提交到本地仓库")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#提交到远程仓库")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"idea使用git记住密码和忘记密码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#idea使用git记住密码和忘记密码"}},[t._v("#")]),t._v(" IDEA使用Git记住密码和忘记密码")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210510222210269.png",alt:"image-20210510222210269"}})]),t._v(" "),a("h2",{attrs:{id:"git分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git分支"}},[t._v("#")]),t._v(" Git分支")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了")]),t._v(" "),a("p",[a("img",{attrs:{src:"/Git.assets/image-20210502224145296.png",alt:"image-20210502224145296"}})])]),t._v(" "),a("li",[a("p",[t._v("git分支中常用指令：")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有本地分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出所有远程分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -r\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，但依然停留在当前分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 新建一个分支，并切换到该分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 合并指定分支到当前分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除远程分支")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin --delete "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -dr "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote/branch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码")])]),t._v(" "),a("li",[a("p",[t._v("master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);