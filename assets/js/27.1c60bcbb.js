(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{457:function(s,t,a){"use strict";a.r(t);var n=a(19),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[s._v("#")]),s._v(" 基础")]),s._v(" "),a("h2",{attrs:{id:"equals-和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equals-和-的区别"}},[s._v("#")]),s._v(' equals() 和 "==" 的区别')]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("equals()方法用来比较的是两个对象的内容是否相等")]),s._v("，由于所有的类都是继承自"),a("code",[s._v("java.lang.Object")]),s._v("类的，所以"),a("strong",[s._v("适用于所有对象")]),s._v("，如果"),a("strong",[s._v("没有对该方法进行覆盖的话")]),s._v("，调用的仍然是Object类中的方法，而Object中的"),a("strong",[s._v("equals方法返回的是==的判断")])]),s._v(" "),a("li",[s._v('"==" '),a("strong",[s._v("比较的是")]),s._v("变量(栈)内存中存放的"),a("strong",[s._v("对象的")]),s._v("(堆)"),a("strong",[s._v("内存地址")]),s._v("，用来判断两个对象的地址是否相同，即是否是指相同一个对象，对于"),a("strong",[s._v("基本类型比较的是值是否相等")])])]),s._v(" "),a("h2",{attrs:{id:"switch-case-支持哪些数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch-case-支持哪些数据类型"}},[s._v("#")]),s._v(" switch case 支持哪些数据类型")]),s._v(" "),a("ul",[a("li",[s._v("基本数据类型：byte, short, char, int")]),s._v(" "),a("li",[s._v("包装数据类型：Byte, Short, Character, Integer")]),s._v(" "),a("li",[s._v("枚举类型：Enum")]),s._v(" "),a("li",[s._v("字符串类型：String（Jdk 7+ 开始支持）")])]),s._v(" "),a("h2",{attrs:{id:"string、stringbuffer与stringbuilder之间区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string、stringbuffer与stringbuilder之间区别"}},[s._v("#")]),s._v(" String、StringBuffer与StringBuilder之间区别")]),s._v(" "),a("ul",[a("li",[s._v("String对象是不可变的")]),s._v(" "),a("li",[s._v("StringBuilder是可变的，它不是线程安全的")]),s._v(" "),a("li",[s._v("StringBuffer也是可变的，它是线程安全的，所以它的开销比StringBuilder大")]),s._v(" "),a("li",[s._v("StringBuffer特有的缓冲区：\n"),a("ul",[a("li",[s._v("StringBuffer每次"),a("code",[s._v("toString")]),s._v("都会使用"),a("code",[s._v("toStringCache")]),s._v("值来构造一个字符串，"),a("strong",[s._v("如果有缓存则直接返回")]),s._v("，缓存会在字符串更新的时候清空，而StringBuilder则每次都需要复制一次字节数组，再构造一个字符串")]),s._v(" "),a("li",[s._v("StringBuffer对缓存区优化，不过StringBuffer的**"),a("code",[s._v("toString")]),s._v("方法仍然是同步的**")])])]),s._v(" "),a("li",[s._v("执行速度方面的比较："),a("strong",[s._v("StringBuilder > StringBuffer")])])]),s._v(" "),a("h2",{attrs:{id:"为什么重写equals一定要重写hashcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么重写equals一定要重写hashcode"}},[s._v("#")]),s._v(" 为什么重写equals一定要重写hashcode")]),s._v(" "),a("ul",[a("li",[a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小明"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小明"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("假如只重写equals而不重写hashcode，那么Student类的hashcode方法就是Object默认的hashcode方法，由于"),a("strong",[s._v("默认的hashcode方法是根据对象的内存地址经哈希算法得来的")]),s._v("，显然此时s1!=s2,故两者的hashcode不一定相等")])]),s._v(" "),a("li",[a("p",[s._v("然而重写了equals，且s1.equals(s2)返回true，根据hashcode的规则，两个对象相等其哈希值一定相等，所以矛盾就产生了，因此重写equals一定要重写hashcode，而且从Student类重写后的hashcode方法中可以看出，重写后返回的新的哈希值与Student的两个属性有关")])]),s._v(" "),a("li",[a("p",[s._v("底层原因是因为HashMap或Set等集合中"),a("strong",[s._v("判断元素是否相等用到了判断hashcode是否相等")]),s._v("，所以"),a("strong",[s._v("为避免我们认为相等但是逻辑判断却不相等的情况出现")]),s._v("，自定义类重写equals必须重写hashcode方法")])]),s._v(" "),a("li",[a("p",[s._v("以下是关于hashcode的一些规定：")]),s._v(" "),a("ul",[a("li",[s._v("两个对象相等，hashcode一定相等")]),s._v(" "),a("li",[s._v("两个对象不等，hashcode不一定不等")]),s._v(" "),a("li",[s._v("hashcode相等，两个对象不一定相等")]),s._v(" "),a("li",[s._v("hashcode不等，两个对象一定不等")])])])]),s._v(" "),a("h2",{attrs:{id:"java泛型的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java泛型的作用"}},[s._v("#")]),s._v(" java泛型的作用")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("类型安全")]),s._v("，泛型的主要目标是实现java的类型安全。 泛型可以使编译器知道一个对象的限定类型是什么，这样编译器就可以在一个高的程度上验证这个类型")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("消除了强制类型转换")]),s._v("，使得代码可读性好，减少了很多出错的机会")])]),s._v(" "),a("li",[a("p",[s._v("更好的"),a("strong",[s._v("代码复用性")]),s._v("，比如实现泛型算法")])]),s._v(" "),a("li",[a("p",[s._v("泛型仅仅"),a("strong",[s._v("是java的语法糖")]),s._v("，它不会影响java虚拟机生成的汇编代码，在"),a("strong",[s._v("编译阶段，虚拟机就会把泛型的类型擦除")]),s._v("，还原成没有泛型的代码")])]),s._v(" "),a("li",[a("p",[s._v("泛型的实现原理")]),s._v(" "),a("ul",[a("li",[s._v("泛型的实现是靠类型擦除技术，类型擦除是在编译期完成的，也就是在"),a("strong",[s._v("编译期间编译器会将泛型的类型参数都擦除成它的限定类型")]),s._v("，如果"),a("strong",[s._v("没有则擦除为object类型")]),s._v("之后在获取的时候再强制类型转换为对应的类型。 在运行期间并没有泛型的任何信息，因此也没有优化")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("<T> T")]),s._v("表示返回值T的类型是一个泛型，"),a("code",[s._v("T")]),s._v("是一个占位符，用来告诉编译器，这个东西先给我留着，等我编译的时候，再告诉你。与实例化对象的泛型参数的类型无关")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),s._v(" demo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取string类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doub"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getListFisrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取nums类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getListFisrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 这个<T> T 可以传入存有任何类型数据的List\n     * 参数T\n     *     第一个 表示是泛型\n     *     第二个 表示返回的是T类型的数据\n     *     第三个 限制参数类型为T\n     * @param data\n     * @return\n     */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getListFisrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("而单独的"),a("code",[s._v("T")]),s._v("就是表示限制你传递的参数类型，"),a("strong",[s._v("实例化对象的泛型参数的类型是什么"),a("code",[s._v("T")]),s._v("就是什么")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo2")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//限制T 为String 类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo2")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" demo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo2")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取string类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"doub"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getListFisrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//获取Integer类型 T 为Integer类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo2")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" demo2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Demo2")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" demo2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getListFisrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n      * 这个只能传递T类型的数据\n      * 返回值 就是Demo<T> 实例化传递的对象类型\n      * @param data\n      * @return\n      */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getListFisrt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("<T> T")]),s._v("表示返回值是一个泛型，传入什么类型，就返回什么类型；而单独的"),a("code",[s._v("T")]),s._v("表示限制传入的参数类型")])])]),s._v(" "),a("h2",{attrs:{id:"什么是字节码-采用字节码的好处是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码-采用字节码的好处是什么"}},[s._v("#")]),s._v(" 什么是字节码?采用字节码的好处是什么?")]),s._v(" "),a("ul",[a("li",[s._v("java中的编译器和解释器：\n"),a("ul",[a("li",[s._v("Java中引入了"),a("strong",[s._v("虚拟机的概念")]),s._v("，即在"),a("strong",[s._v("机器和编译程序之间加入了一层抽象的虚拟的机器")]),s._v("。这台虚拟的机器在"),a("strong",[s._v("任何平台上都提供给编译程序一个的共同的接口")])]),s._v(" "),a("li",[a("strong",[s._v("编译程序只需要面向虚拟机")]),s._v("，生成"),a("strong",[s._v("虚拟机能够理解的代码")]),s._v("，然后由"),a("strong",[s._v("解释器来将虚拟机代码转换为特定系统的机器码执行")]),s._v("。在Java中，"),a("strong",[s._v("这种供虚拟机理解的代码叫做字节码")]),s._v("(即扩展名为.class的文件)，它不面向任何特定的处理器，只面向虚拟机")]),s._v(" "),a("li",[a("strong",[s._v("每一种平台的解释器是不同的")]),s._v("，但是实现的虚拟机是相同的。Java源程序经过编译器编译后变成字节码，字节码由虚拟机解释执行，虚拟机将每一条要执行的字节码送给解释器，解释器将其翻译成特定机器上的机器码，然后在特定的机器上运行。这也"),a("strong",[s._v("就是解释了Java的编译与解释并存的特点")])]),s._v(" "),a("li",[s._v("Java源代码---\x3e编译器---\x3ejvm可执行的Java字节码(即虚拟指令)---\x3ejvm----jvm中解释器----\x3e机器可执行的二进制机器码----\x3e程序运行")])])]),s._v(" "),a("li",[s._v("采用字节码的好：\n"),a("ul",[a("li",[s._v("Java语言通过字节码的方式，在一定程度上"),a("strong",[s._v("解决了传统解释型语言执行效率低的问题")]),s._v("，同时"),a("strong",[s._v("又保留了解释型语言可移植的特点")]),s._v("。所以Java程序运行时比较高效，而且，由于字节码并不专对一种特定的机器，因此，Java程序无须重新编译便可在多种不同的计算机上运行")])])])]),s._v(" "),a("h2",{attrs:{id:"java类加载器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java类加载器"}},[s._v("#")]),s._v(" Java类加载器")]),s._v(" "),a("ul",[a("li",[s._v("JDK自带有三个类加载器: Bootstrap ClassLoader、ExtClassLoader、AppClassLoader")]),s._v(" "),a("li",[s._v("Bootstrap ClassLoader是ExtClassLoader的父类加载器("),a("strong",[s._v("根加载器")]),s._v(")，默认负责加载%JAVA_HOME%"),a("strong",[s._v("/lib")]),s._v("下的jar包和class文件")]),s._v(" "),a("li",[s._v("ExtClassLoader是AppClassLoader的父类加载器("),a("strong",[s._v("扩展类加载器")]),s._v(")，负责加载%JAVA_HOME%"),a("strong",[s._v("/lib/ext")]),s._v("文件夹下的jar包和class类")]),s._v(" "),a("li",[s._v("AppClassLoader是自定义类加载器的父类("),a("strong",[s._v("系统类加载器")]),s._v(")，负责加载"),a("strong",[s._v("classpath下的类文件")])]),s._v(" "),a("li",[s._v("继承ClassLoader实现自定义类加载器")])]),s._v(" "),a("h2",{attrs:{id:"jdk动态代理过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk动态代理过程"}},[s._v("#")]),s._v(" JDK动态代理过程")]),s._v(" "),a("ol",[a("li",[s._v("创建真实角色，"),a("strong",[s._v("新建一个实现"),a("code",[s._v("InvocationHandler")]),s._v("接口的类")]),s._v("，添加储存真实角色的成员变量"),a("code",[s._v("Object target")]),s._v("和它的"),a("code",[s._v("setter")]),s._v("方法，用于传入真实角色，编写增强方法，实现"),a("code",[s._v("invoke")]),s._v("方法")]),s._v(" "),a("li",[s._v("实例化"),a("code",[s._v("InvocationHandler")]),s._v("实现类，"),a("strong",[s._v("使用"),a("code",[s._v("Proxy.newProxyInstance(类加载器, 真实对象的接口, Handler实现类);")]),s._v("生成代理对象")])]),s._v(" "),a("li",[s._v("通过代理对象调用方法，读取字节码文件可以得出：代理对象的"),a("strong",[s._v("构造方法会将代理对象与生成代理对象时传递的Handler实现类绑定")]),s._v("，代理对象会先"),a("strong",[s._v("根据接口的方法获取每个方法的"),a("code",[s._v("Method")]),s._v("对象")]),s._v("，然后在"),a("strong",[s._v("每个方法里把方法传递的参数封装为一个对象")]),s._v("，再调用Handler实现类的**"),a("code",[s._v("invoke")]),s._v("方法传入参数("),a("code",[s._v("this, 方法对象method, 参数对象args")]),s._v(")"),a("strong",[s._v("，"),a("code",[s._v("invoke")]),s._v("方法内调用增强方法然后")]),s._v("利用反射 "),a("code",[s._v("method.invoke(target, args);")]),s._v("调用真实对象方法**")])]),s._v(" "),a("h2",{attrs:{id:"双亲委派机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[s._v("#")]),s._v(" 双亲委派机制")]),s._v(" "),a("p",[a("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95%E9%A2%98.assets/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png",alt:"双亲委派"}})]),s._v(" "),a("ul",[a("li",[s._v("双亲委派模型的好处：\n"),a("ol",[a("li",[s._v("主要是为了安全性，避免用户自己编写的类动态替换Java的一些核心类，比如String")]),s._v(" "),a("li",[s._v("同时也避免了类的重复加载，因为JVM中区分不同类，不仅仅是根据类名，相同的class文件被不同的ClassLoader加载就是不同的两个类")])])])]),s._v(" "),a("h2",{attrs:{id:"为何要使用双重校验锁单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何要使用双重校验锁单例模式"}},[s._v("#")]),s._v(" 为何要使用双重校验锁单例模式")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("双重校验锁第一次进行判空原因：当程序顺序执行的时候，"),a("strong",[s._v("如果不进行判空，每一个线程都会先去获得当前类的类锁，而其他线程都进入阻塞状态")]),s._v("。单例模式中初始化单例的程序只会执行一次，"),a("strong",[s._v("大部分情况下会直接到return语句返回")]),s._v("，如果"),a("strong",[s._v("都阻塞在获取锁的位置，会大大降低程序的运行速度")])])]),s._v(" "),a("li",[a("p",[s._v("双重校验锁第二次进行判空原因：假设有两个线程A和B，都进行完第一次判空了，A和B都阻塞在如下所示位置")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getSingleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞处")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                    singleton "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[s._v("这个时候A线程获取了类锁，然后B线程被阻塞，A线程新建了一个实例后释放了锁，B线程获取锁，又新建了一个实例，这破坏了单例设计模式的初衷")])])])]),s._v(" "),a("h2",{attrs:{id:"如何实现一个loc容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何实现一个loc容器"}},[s._v("#")]),s._v(" 如何实现一个loC容器")]),s._v(" "),a("ol",[a("li",[s._v("配置文件配置包扫描路径")]),s._v(" "),a("li",[s._v("递归包扫描获取.class文件")]),s._v(" "),a("li",[s._v("反射、确定需要交给IoC管理的类")]),s._v(" "),a("li",[s._v("对需要注入的类进行依赖注入")])]),s._v(" "),a("ul",[a("li",[s._v("详细步骤：\n"),a("ul",[a("li",[s._v("配置文件中"),a("strong",[s._v("指定需要扫描的包路径")])]),s._v(" "),a("li",[a("strong",[s._v("定义一些注解")]),s._v("，分别表示访问控制层、业务服务层、数据持久层、依赖注入注解、"),a("strong",[s._v("获取配置文件注解")])]),s._v(" "),a("li",[s._v("从配置文件中"),a("strong",[s._v("获取需要扫描的包路径")]),s._v("，获取到当前路径下的文件信息及文件夹信息，我们"),a("strong",[s._v("将当前路径下所有以.class结尾的文件添加到一个Set集合中进行存储")])]),s._v(" "),a("li",[a("strong",[s._v("遍历这个Set集合")]),s._v("，获取在类上"),a("strong",[s._v("有指定注解的类")]),s._v("，并将其"),a("strong",[s._v("解析成"),a("code",[s._v("BeanDefinition")]),s._v("对象交给loC容器")]),s._v("，定义一个"),a("strong",[s._v("安全的Map用来存储这些对象")])]),s._v(" "),a("li",[a("strong",[s._v("遍历这个loC容器")]),s._v("，获取到"),a("strong",[s._v("每一个类的实例")]),s._v("，"),a("strong",[s._v("判断")]),s._v("里面是否有"),a("strong",[s._v("依赖其他的类")]),s._v("的实例，然后"),a("strong",[s._v("进行递归注入")])])])])]),s._v(" "),a("h2",{attrs:{id:"gc如何判断对象可以被回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc如何判断对象可以被回收"}},[s._v("#")]),s._v(" GC如何判断对象可以被回收")]),s._v(" "),a("ul",[a("li",[s._v("引用计数法：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收")]),s._v(" "),a("li",[s._v("可达性分析法：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，那么虚拟机就判断是可回收对象")]),s._v(" "),a("li",[s._v("引用计数法效率高，但有缺陷，可能会出现(循环引用)A引用了B，B又引用了A，这时候就算他们都不再使用了，但因为相互引用计数器=1永远无法被回收")]),s._v(" "),a("li",[a("strong",[s._v("GC Roots的对象")]),s._v("有：\n"),a("ul",[a("li",[a("strong",[s._v("虚拟机栈")]),s._v("(栈帧中的本地变量表)中引用的对象")]),s._v(" "),a("li",[a("strong",[s._v("方法区中类静态属性")]),s._v("引用的对象")]),s._v(" "),a("li",[a("strong",[s._v("方法区中常量")]),s._v("引用的对象")]),s._v(" "),a("li",[a("strong",[s._v("本地方法栈中")]),s._v("JNI(即一般说的Native方法)引用的对象")])])]),s._v(" "),a("li",[s._v("可达性算法中的"),a("strong",[s._v("不可达对象并不是立即死亡的")]),s._v("，对象"),a("strong",[s._v("拥有一次自我拯救的机会")]),s._v("。对象被系统"),a("strong",[s._v("宣告死亡至少要经历两次标记过程")]),s._v("：第一次是经过可达性分析发现没有与GC Roots相连接的引用链，第二次是在由虚拟机自动建立的Finalizer队列中判断是否需要执行finalize()方法")]),s._v(" "),a("li",[s._v("当对象变成(GC Roots)不可达时，GC会"),a("strong",[s._v("判断该对象是否覆盖了finalize方法")]),s._v("，若未覆盖，则直接将其回收。否则，"),a("strong",[s._v("若对象未执行过finalize方法，将其放入F-Queue队列")]),s._v("，由一低优先级线程执行该队列中对象的finalize方法。"),a("strong",[s._v("执行finalize方法完毕后，GC会再次判断该对象是否可达")]),s._v('，若不可达，则进行回收，否则，对象"复活"')]),s._v(" "),a("li",[a("strong",[s._v("每个对象只能触发一次finalize()方法")])]),s._v(" "),a("li",[s._v("由于finalize()方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，不推荐大家使用，建议遗忘它")])]),s._v(" "),a("h2",{attrs:{id:"说一下hashmap的put方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说一下hashmap的put方法"}},[s._v("#")]),s._v(" 说一下HashMap的Put方法")]),s._v(" "),a("ul",[a("li",[s._v("先说HashMap的Put方法的大体流程：\n"),a("ol",[a("li",[s._v("根据Key"),a("strong",[s._v("通过哈希算法")]),s._v("与"),a("strong",[s._v("与运算")]),s._v("得出数组下标")]),s._v(" "),a("li",[s._v("如果数组**下标位置元素为空，则将key和value封装为Entry对象(JDK1.7中是Entry对象，JDK1.8中是Node对象）**并放入该位置")]),s._v(" "),a("li",[s._v("如果数组"),a("strong",[s._v("下标位置元素不为空")]),s._v("，则要分情况讨论\n"),a("ul",[a("li",[s._v("如果是JDK1.7，则"),a("strong",[s._v("先判断是否需要扩容")]),s._v("，如果要扩容就进行扩容，如果不用扩容就"),a("strong",[s._v("生成Entry对象")]),s._v("，并使用"),a("strong",[s._v("头插法")]),s._v("添加到当前位置的链表中")]),s._v(" "),a("li",[s._v("如果是JDK1.8，则"),a("strong",[s._v("会先判断当前位置上的Node的类型")]),s._v("，看是红黑树Node，还是链表Node\n"),a("ul",[a("li",[s._v("如果是"),a("strong",[s._v("红黑树Node")]),s._v("，则将key和value"),a("strong",[s._v("封装为一个红黑树节点并添加到红黑树中去")]),s._v("，在这个过程中会"),a("strong",[s._v("判断红黑树中是否存在当前key")]),s._v("，如果存在则更新value")]),s._v(" "),a("li",[s._v("如果此位置上的Node对象是"),a("strong",[s._v("链表节点")]),s._v("，则将key和value"),a("strong",[s._v("封装为一个链表Node")]),s._v("并通过"),a("strong",[s._v("尾插法")]),s._v("插入到链表的最后位置去，因为是尾插法，所以"),a("strong",[s._v("需要遍历链表")]),s._v("，在"),a("strong",[s._v("遍历链表的过程中会判断是否存在当前key")]),s._v("，如果存在则更新value，当遍历完链表后，将新链表Node插入到链表中，插入到链表后，会看当前链表的节点个数，如果"),a("strong",[s._v("超过了8，且数组长度超过了64，那么则会将该链表转成红黑树")])]),s._v(" "),a("li",[s._v("将key和value封装位Node"),a("strong",[s._v("插入到链表或红黑树中后，再判断是否需要进行扩容")]),s._v("，如果需要就扩容，如果不需要就结束PUT方法")])])])])])])]),s._v(" "),a("li",[s._v("JDK1.7中是"),a("strong",[s._v("先判断是否需要扩容")]),s._v("再插入对象，而JDK1.8中是"),a("strong",[s._v("先插入对象")]),s._v("再判断是否需要扩容")])]),s._v(" "),a("h2",{attrs:{id:"说说你对线程安全的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说你对线程安全的理解"}},[s._v("#")]),s._v(" 说说你对线程安全的理解")]),s._v(" "),a("ul",[a("li",[s._v("其实不是线程安全、应该是内存安全，堆是共享内存，可以被所有线程访问")]),s._v(" "),a("li",[a("strong",[s._v("当程序多线程运行与单线程运行结果一致时，说明程序是线程安全的")]),s._v("，多线程可以使利用锁实现线程安全")]),s._v(" "),a("li",[a("strong",[s._v("堆是进程和线程共有的空间")]),s._v("，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是用完了要还给操作系统，要不然就是内存泄漏\n"),a("ul",[a("li",[s._v("在Java中，堆是Java虚拟机所管理的内存中最大的一块，是所有线程共享的一块内存区域，在虚拟机启动时创建。堆所存在的内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存")])])]),s._v(" "),a("li",[a("strong",[s._v("栈是每个线程独有的")]),s._v("，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是线程安全的。操作系统在切换线程的时候会自动切换栈。栈空间不需要在高级语言里面显式的分配和释放")]),s._v(" "),a("li",[s._v("目前主流操作系统都是多任务的，即多个进程同时运行。为了保证安全，每个进程只能访问分配给自己的内存空间，而不能访问别的进程的，这是由操作系统保障的")]),s._v(" "),a("li",[s._v("在每个进程的内存空间中都会有一块特殊的公共区域，通常称为堆(内存)。进程内的所有线程都可以访问到该区域，这就是造成问题的潜在原因")])]),s._v(" "),a("h2",{attrs:{id:"对守护线程的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对守护线程的理解"}},[s._v("#")]),s._v(" 对守护线程的理解")]),s._v(" "),a("ul",[a("li",[s._v("守护线程："),a("strong",[s._v("为所有非守护线程提供服务的线程")]),s._v("，"),a("strong",[s._v("任何一个守护线程")]),s._v("都是整个JVM中"),a("strong",[s._v("所有非守护线程")]),s._v("的保姆")]),s._v(" "),a("li",[s._v("守护线程类似于整个进程的一个默默无闻的小喽喽，"),a("strong",[s._v("它的生死无关重要，它却依赖整个进程而运行")]),s._v("。哪天其他线程结束了，没有要执行的了，程序就结束了，理都没理守护线程，就把它中断了")]),s._v(" "),a("li",[s._v("注意：由于守护线程的终止是自身无法控制的，因此千万不要把IO、File等重要操作逻辑分配给它，因为它不靠谱")]),s._v(" "),a("li",[s._v("守护线程的作用是什么?\n"),a("ul",[a("li",[s._v("举例，GC垃圾回收线程：就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread，程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是JVM上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源")])])]),s._v(" "),a("li",[s._v("应用场景：\n"),a("ol",[a("li",[s._v("来"),a("strong",[s._v("为其它线程提供服务支持")]),s._v("的情况")]),s._v(" "),a("li",[s._v("或者在任何情况下，"),a("strong",[s._v("程序结束时，这个线程必须正常且立刻关闭，就可以作为守护线程来使用")]),s._v("。反之，如果一个正在执行某个操作的线程必须要正确地关闭掉否则就会出现不好的后果的话，那么这个线程就不能是守护线程，而是用户线程。通常都是些关键的事务，比方说，数据库录入或者更新，这些操作都是不能中断的")])])]),s._v(" "),a("li",[a("code",[s._v("thread.setDaemon(true)")]),s._v("必须在"),a("code",[s._v("thread.start()")]),s._v("之前设置，否则会跑出一个"),a("code",[s._v("IllegalThreadStateException")]),s._v("异常。你"),a("strong",[s._v("不能把正在运行的常规线程设置为守护线程")])]),s._v(" "),a("li",[a("strong",[s._v("在Daemon线程中产生的新线程也是Daemon的")])]),s._v(" "),a("li",[s._v("守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断")]),s._v(" "),a("li",[s._v("Java自带的多线程框架，比如"),a("code",[s._v("ExecutorService")]),s._v("，会将守护线程转换为用户线程，所以如果要使用后台线程就不能使用java线程池")])]),s._v(" "),a("h2",{attrs:{id:"线程之间是如何进行通讯的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程之间是如何进行通讯的"}},[s._v("#")]),s._v(" 线程之间是如何进行通讯的")]),s._v(" "),a("ul",[a("li",[s._v("线程之间可以通过共享内存或基于网络来进行通信")]),s._v(" "),a("li",[s._v("如果是通过共享内存来进行通信，则需要考虑并发问题，什么时候阻塞，什么时候唤醒")]),s._v(" "),a("li",[s._v("像Java中的"),a("code",[s._v("wait()")]),s._v("、"),a("code",[s._v("notify()")]),s._v("就是阻塞和唤醒")]),s._v(" "),a("li",[s._v("通过网络就比较简单了，通过网络连接将通信数据发送给对方，当然也要考虑到并发问题，处理方式就是加锁等方式")])]),s._v(" "),a("h2",{attrs:{id:"threadlocal的原理和使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal的原理和使用场景"}},[s._v("#")]),s._v(" ThreadLocal的原理和使用场景")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("ThreadLocal")]),s._v("是Java中所提供的"),a("strong",[s._v("线程本地存储机制")]),s._v("，可以利用该机制将数据缓存在某个线程内部，该线程可以在任意时刻、任意方法中获取缓存的数据")]),s._v(" "),a("li",[s._v("每个线程中都"),a("strong",[s._v("有一个自己的"),a("code",[s._v("ThreadLocalMap")]),s._v("类对象")]),s._v("，并含"),a("strong",[s._v("有一个"),a("code",[s._v("ThreadLocalMap")]),s._v("类型的成员变量"),a("code",[s._v("threadLocals")])]),s._v("，"),a("strong",[s._v("它存储本线程中所有"),a("code",[s._v("ThreadLocal")]),s._v("对象(可以有多个)及其对应的值")])]),s._v(" "),a("li",[a("strong",[a("code",[s._v("ThreadLocalMap")]),s._v("由一个个"),a("code",[s._v("Entry")]),s._v("对象构成")]),s._v("，可以"),a("strong",[s._v("理解为一个容器，"),a("code",[s._v("ThreadLocal")]),s._v("是key，存的数据是value")])]),s._v(" "),a("li",[a("code",[s._v("ThreadLocal")]),s._v("不支持继承性，同一个ThreadLocal变量"),a("strong",[s._v("在父线程中被设置值后，在子线程中是获取不到的")])]),s._v(" "),a("li",[a("code",[s._v("Entry")]),s._v("继承自"),a("code",[s._v("WeakReference<ThreadLocal<?>>")]),s._v("，一个"),a("code",[s._v("Entry")]),s._v("由 "),a("code",[s._v("ThreadLocal")]),s._v("对象和"),a("code",[s._v("object")]),s._v("构成。由此可见，"),a("code",[s._v("Entry")]),s._v("的key是"),a("code",[s._v("ThreadLocal")]),s._v("对象，并且是一个弱引用。"),a("strong",[s._v("当没指向key的强引用后，该key就会被垃圾收集器回收")])]),s._v(" "),a("li",[s._v("当"),a("strong",[s._v("执行set方法时，"),a("code",[s._v("ThreadLocal")]),s._v("首先会获取当前线程对象，然后获取当前线程的"),a("code",[s._v("ThreadLocalMap")]),s._v("对象")]),s._v("。再以当前"),a("code",[s._v("ThreadLocal")]),s._v("对象为key，将值存储进"),a("code",[s._v("ThreadLocalMap")]),s._v("对象中")]),s._v(" "),a("li",[s._v("get方法执行过程类似。"),a("code",[s._v("ThreadLocal")]),s._v("首先会获取当前线程对象，然后获取当前线程的"),a("code",[s._v("ThreadLocalMap")]),s._v("对象。再"),a("strong",[s._v("以当前"),a("code",[s._v("ThreadLocal")]),s._v("对象为key")]),s._v("，获取对应的value")]),s._v(" "),a("li",[s._v("由于每一条线程均含有各自私有的"),a("code",[s._v("ThreadLocalMap")]),s._v("容器，这些容器相互独立互不影响，因此不会存在线程安全性问题，从而也无需使用同步机制来保证多条线程访问容器的互斥性")]),s._v(" "),a("li",[s._v("使用场景：\n"),a("ol",[a("li",[s._v("在"),a("strong",[s._v("进行对象跨层传递")]),s._v("的时候，使用ThreadLocal可以避免多次传递，打破层次间的约束")]),s._v(" "),a("li",[a("strong",[s._v("线程间数据隔离")])]),s._v(" "),a("li",[s._v("进行事务操作，事务与线程是绑定的，用于"),a("strong",[s._v("存储线程事务信息")])]),s._v(" "),a("li",[s._v("数据库连接，Session会话管理，线程级的操作都适合使用")])])]),s._v(" "),a("li",[a("strong",[s._v("spring框架在事务开始时会给当前线程绑定一个"),a("code",[s._v("JDBC connection")])]),s._v("，在整个事务过程都是使用该线程绑定的connection来执行数据库操作，"),a("strong",[s._v("实现了事务的隔离性")]),s._v("。Spring框架里面就是用的"),a("code",[s._v("ThreadLocal")]),s._v("来实现这种隔离")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95%E9%A2%98.assets/image-20210621205402327.png",alt:"image-20210621205402327"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95%E9%A2%98.assets/download.jpg",alt:"img"}})]),s._v(" "),a("h2",{attrs:{id:"threadlocal内存泄露原因-如何避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal内存泄露原因-如何避免"}},[s._v("#")]),s._v(" ThreadLocal内存泄露原因，如何避免")]),s._v(" "),a("ul",[a("li",[s._v("内存泄露为程序在申请内存后，"),a("strong",[s._v("无法释放已申请的内存空间")]),s._v("，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光")]),s._v(" "),a("li",[a("strong",[s._v("不再会被使用的对象或者变量占用的内存不能被回收，就是内存泄露")])]),s._v(" "),a("li",[a("code",[s._v("ThreadLocalMap")]),s._v("的key为什么设计成弱引用\n"),a("ul",[a("li",[s._v("在"),a("strong",[s._v("线程长时间存活的情况下")]),s._v("，如果"),a("code",[s._v("ThreadLocalMap")]),s._v("没有使用弱引用，当Map中被放入大量大对象和值时，"),a("strong",[s._v("由于"),a("code",[s._v("ThreadLocalMap")]),s._v("始终会被线程引用")]),s._v("，而又"),a("strong",[s._v("不及时手动删除K-V的话就很可能会出现应用堆栈溢出")]),s._v("的情况。但是如果使用弱引用的话，那么在没有其他强引用的时候，GC会自动清理，在一定程度上会降低堆栈溢出的风险")])])]),s._v(" "),a("li",[s._v("如果key使用强引用\n"),a("ul",[a("li",[s._v("当"),a("code",[s._v("threadLocalMap")]),s._v("的key为强引用回收"),a("code",[s._v("ThreadLocal")]),s._v("时，因为"),a("code",[s._v("ThreadLocalMap")]),s._v("还持有"),a("code",[s._v("ThreadLocal")]),s._v("的强引用，如果没有手动删除，"),a("code",[s._v("ThreadLocal")]),s._v("不会被回收，导致"),a("code",[s._v("Entry")]),s._v("内存泄漏")])])]),s._v(" "),a("li",[s._v("key使用弱引用\n"),a("ul",[a("li",[s._v("当"),a("code",[s._v("ThreadLocalMap")]),s._v("的key为弱引用回收"),a("code",[s._v("ThreadLocal")]),s._v("时，由于"),a("code",[s._v("ThreadLocalMap")]),s._v("持有"),a("code",[s._v("ThreadLocal")]),s._v("的弱引用，即使没有手动删除，"),a("code",[s._v("ThreadLocal")]),s._v("也会被回收")]),s._v(" "),a("li",[s._v("由于"),a("code",[s._v("ThreadLocalMap")]),s._v("的生命周期跟Thread一样长，如果都没有手动删除对应key，都会导致内存泄漏，但是使用弱引用可以多一层保障："),a("strong",[s._v("当key为null，在下一次"),a("code",[s._v("ThreadLocalMap")]),s._v("调用"),a("code",[s._v("set()，get()，remove()")]),s._v("方法的时候会清除"),a("code",[s._v("value")]),s._v("值")])]),s._v(" "),a("li",[s._v("但如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在"),a("strong",[s._v("一条强引用链")]),s._v("：\n"),a("ul",[a("li",[a("code",[s._v("Thread Ref -> Thread -> ThreaLocalMap -> Entry -> value")])])])])])]),s._v(" "),a("li",[a("code",[s._v("ThreadLocal")]),s._v("为什么会内存泄露\n"),a("ul",[a("li",[a("code",[s._v("ThreadLocalMap")]),s._v("的key为弱引用，但value是强引用，当key被回收时，就会发现value依然留在了Map当中了，我们无法获取，也无法删除。这就是所谓的"),a("strong",[s._v("内存泄露")]),s._v("问题")])])]),s._v(" "),a("li",[a("code",[s._v("ThreadLocal")]),s._v("正确的使用方法\n"),a("ul",[a("li",[s._v("每次使用完"),a("code",[s._v("ThreadLocal")]),s._v("都调用它的"),a("code",[s._v("remove()")]),s._v("方法清除数据")]),s._v(" "),a("li",[s._v("将"),a("code",[s._v("ThreadLocal")]),s._v("变量定义成"),a("code",[s._v("private static")]),s._v("，这样就一直存在"),a("code",[s._v("ThreadLocal")]),s._v("的强引用，也就能保证任何时候都能通过"),a("code",[s._v("ThreadLocal")]),s._v("的弱引用访问到"),a("code",[s._v("Entry")]),s._v("的"),a("code",[s._v("value")]),s._v("值，进而清除掉")])])])]),s._v(" "),a("h2",{attrs:{id:"什么是tlab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是tlab"}},[s._v("#")]),s._v(" 什么是TLAB？")]),s._v(" "),a("ul",[a("li",[s._v("在Java中，新对象在"),a("strong",[s._v("Eden中分配")]),s._v("。 这是"),a("strong",[s._v("线程之间共享的内存空间")]),s._v("。 如果考虑到多个线程可以"),a("strong",[s._v("同时分配新对象")]),s._v("，那么显然"),a("strong",[s._v("需要某种同步机制")]),s._v("。 怎么解决呢？ 分配队列？ 某种互斥锁？ 即使这些是不错的解决方案，也有更好的解决方案。 这就是TLAB发挥作用的地方。 TLAB代表"),a("strong",[s._v("线程本地分配缓冲区")]),s._v("，它是Eden内部的一个"),a("strong",[s._v("专为线程分配的区域")]),s._v("。 换句话说，"),a("strong",[s._v("只有一个线程可以在该区域分配新对象")]),s._v("。 每个线程都有自己的TLAB。 因此，"),a("strong",[s._v("只要在TLAB中分配对象，就不需要任何类型的同步")])]),s._v(" "),a("li",[s._v("TLAB只是让"),a("strong",[s._v("每个线程有私有的分配指针")]),s._v("，但底下"),a("strong",[s._v("存对象的内存空间还是给所有线程访问的")]),s._v("，只是其它线程无法在这个区域分配而已")]),s._v(" "),a("li",[s._v("当一个TLAB用满（分配指针top撞上分配极限end了），就重新申请一个TLAB")])]),s._v(" "),a("h2",{attrs:{id:"线程的工作内存是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程的工作内存是什么"}},[s._v("#")]),s._v(" 线程的工作内存是什么")]),s._v(" "),a("ul",[a("li",[s._v("每条线程有自己的工作内存，线程的工作内存中保存了被该线程"),a("strong",[s._v("使用到的变量")]),s._v("的"),a("strong",[s._v("主内存副本拷贝")]),s._v("。线程对变量的所有操作（读取、赋值），都"),a("strong",[s._v("必须在工作内存中进行")]),s._v("，而"),a("strong",[s._v("不能直接读写主内存中的变量")]),s._v("。不同线程之间也"),a("strong",[s._v("无法直接访问对方工作内存中的变量")]),s._v("，线程间变量值的传递均"),a("strong",[s._v("需要通过主内存来完成")])]),s._v(" "),a("li",[s._v("在深入理解java虚拟机一书中说过，线程的工作内存与java的堆、栈并不是一个层次上的内存划分，可与处理器的高速缓存类比。工作内存中"),a("strong",[s._v("主要包括两个部分")]),s._v("，一个是属于"),a("strong",[s._v("该线程私有的栈和对主存部分变量拷贝的寄存器")]),s._v("(包括程序计数器PC和CPU工作的高速缓存区)")]),s._v(" "),a("li",[a("strong",[s._v("工作内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);