<<<<<<< HEAD:assets/js/37.28c4640d.js
(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{471:function(v,_,t){"use strict";t.r(_);var l=t(19),a=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[v._v("#")]),v._v(" 操作系统")]),v._v(" "),t("h2",{attrs:{id:"进程管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[v._v("#")]),v._v(" 进程管理")]),v._v(" "),t("h3",{attrs:{id:"进程的状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态"}},[v._v("#")]),v._v(" 进程的状态（++）")]),v._v(" "),t("ul",[t("li",[v._v("进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。它由程序块、进程控制块（PCB）和数据块三部分组成")]),v._v(" "),t("li",[v._v("进程与程序的区别：进程是程序的一次执行过程，没有程序就没有进程。程序是完成某个特定功能的一系列程序语句的集合，只要不被破坏，它就永远存在。程序是一个静态的概念，而进程是一个动态的概念，它由创建而产生，完成任务后因撤销而消亡;进程是系统进行资源分配和调度的独立单位，而程序不是")]),v._v(" "),t("li",[v._v("进程的状态分为：运行、就绪、等待（堵塞）")])]),v._v(" "),t("h3",{attrs:{id:"前趋图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前趋图"}},[v._v("#")]),v._v(" 前趋图（+++）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("画出下面6条语句的"),t("strong",[v._v("前趋图")]),v._v("（符号“:=”是赋值的意思）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("S1：a:=x + y;")])]),v._v(" "),t("li",[t("p",[v._v("S2：b:=z + 1;")])]),v._v(" "),t("li",[t("p",[v._v("S3：c:=a - b;")])]),v._v(" "),t("li",[t("p",[v._v("S4：e:=c + 1;")])]),v._v(" "),t("li",[t("p",[v._v("S5：f:=c + a;")])]),v._v(" "),t("li",[t("p",[v._v("S6：g:=e * f;")])]),v._v(" "),t("li",[t("p",[v._v("分析：")]),v._v(" "),t("ul",[t("li",[v._v("S1与S2可以并发执行，因为它们互不依赖；但是S3必须在a（S1）、b（S2）被赋值后才能执行，S4必须在c（S3）之后才能执行，S5必须在c（S3）被赋值后才能执行，S6必须在e（S4）、f（S5）被赋值后才能执行。")])])]),v._v(" "),t("li",[t("p",[v._v("答案：")]),v._v(" "),t("div",{staticClass:"language-mermaid line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("graph LR\nA((S1))--\x3eB((S3))\nC((S2))--\x3eB\nB--\x3eD((S5))\nB--\x3eE((S4))\nD--\x3eF((S6))\nE--\x3eF\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br")])])])])])]),v._v(" "),t("h3",{attrs:{id:"信号量与pv操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#信号量与pv操作"}},[v._v("#")]),v._v(" 信号量与PV操作（++++）")]),v._v(" "),t("ul",[t("li",[v._v("临界资源：各进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等")]),v._v(" "),t("li",[v._v("临界区：每个进程中"),t("strong",[v._v("访问临界资源的那段代码称为临界区")])]),v._v(" "),t("li",[v._v("信号量：是一种特殊的变量")]),v._v(" "),t("li",[t("strong",[v._v("P是申请资源的操作，V是释放资源的操作")])]),v._v(" "),t("li",[t("strong",[v._v("P操作：")]),v._v(" "),t("ul",[t("li",[v._v("资源量S=S-1 -> 判断S<0，F则继续，T则放入阻塞进程队列")])])]),v._v(" "),t("li",[t("strong",[v._v("V操作：")]),v._v(" "),t("ul",[t("li",[v._v("资源量S=S+1 -> 判断S<=0，T则说明阻塞队列中还有需要唤醒的进程，于是从阻塞队列中唤醒一个进程，F则继续")])])]),v._v(" "),t("li",[v._v("多个进程共享一台打印机问题（"),t("strong",[v._v("互斥模型")]),v._v("）：\n"),t("ul",[t("li",[v._v("P(S); 使用打印机 V(S); 后续代码;")]),v._v(" "),t("li",[v._v("互斥信号量S的初值为1")])])]),v._v(" "),t("li",[v._v("单缓冲区（一次只有一个进程执行）生产者、消费者问题（"),t("strong",[v._v("同步模型")]),v._v("）：\n"),t("ul",[t("li",[v._v("生产者：生产一个产品; P(S1); 送产品到缓冲区; V(S2)告诉消费者消费;")]),v._v(" "),t("li",[v._v("消费者：P(S2); 从缓冲区取产品; V(S1)告诉生产者生产; 消费产品;")]),v._v(" "),t("li",[v._v("S1初值为1，S2初值为0，S1为生产者生产产品，S2代表消费者消费产品")])])])]),v._v(" "),t("h3",{attrs:{id:"死锁及银行家算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁及银行家算法"}},[v._v("#")]),v._v(" 死锁及银行家算法（++++）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("死锁问题")]),v._v(" "),t("ul",[t("li",[v._v("进程管理是操作系统的核心，但如果设计不当，就会出现死锁的问题。如果一个进程在等待一件不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，就会造成系统死锁。")]),v._v(" "),t("li",[v._v("例：系统有5个进程：A、B、C、D、E。这5个进程都需要4个系统资源。如果系统至少有多少个资源，则不可能发生死锁\n"),t("ul",[t("li",[v._v("答案：进程数*(每个进程所需资源-1)+1")])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("死锁形成的四大条件：互斥、保持和等待、不可剥夺、环路等待")])])]),v._v(" "),t("li",[t("p",[v._v("银行家算法：分配资源的原则")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程")])]),v._v(" "),t("li",[v._v("进程"),t("strong",[v._v("可以分期请求资源")]),v._v("，但请求的总数不能超过最大需求量")]),v._v(" "),t("li",[v._v("当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源")])])])]),v._v(" "),t("h2",{attrs:{id:"存储管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储管理"}},[v._v("#")]),v._v(" 存储管理")]),v._v(" "),t("h3",{attrs:{id:"段页式存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#段页式存储"}},[v._v("#")]),v._v(" 段页式存储（++++）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("页式存储："),t("strong",[v._v("将程序与内存均划分为同样大小的块，以页为单位将程序调入内存")])]),v._v(" "),t("ul",[t("li",[v._v("把逻辑地址空间划分为大小相等的若干页，页大小与块大小相等")]),v._v(" "),t("li",[t("strong",[v._v("逻辑地址=页号+页内地址")])]),v._v(" "),t("li",[t("strong",[v._v("物理地址=页帧号(物理块号)+页内地址")])]),v._v(" "),t("li",[v._v("优点：利用率高，碎片小，分配及管理简单")]),v._v(" "),t("li",[v._v("缺点：增加了系统开销，可能产生抖动现象")]),v._v(" "),t("li",[v._v("例如，页式存储系统中，每个页的大小为4KB\n"),t("ul",[t("li",[v._v("页表（页号，块号）：0,2 1,3 2,6 3,8...")]),v._v(" "),t("li",[v._v("逻辑地址：10 (1100 1101 1110)对应的物理地址为：110 1100 1101 1110")])])])])]),v._v(" "),t("li",[t("p",[v._v("段式存储："),t("strong",[v._v("按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("优点：多道程序共享内存，各段程序修改互不影响")])]),v._v(" "),t("li",[t("p",[v._v("缺点：内存利用率低，内存碎片浪费大")])]),v._v(" "),t("li",[t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[v._v("段号")]),v._v(" "),t("th",{staticStyle:{"text-align":"center"}},[v._v("段长")]),v._v(" "),t("th",{staticStyle:{"text-align":"center"}},[v._v("基址(起始地址)")])])]),v._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[v._v("0")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("30k")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("40k")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[v._v("1")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("20k")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("80k")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[v._v("2")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("15k")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("120k")])])])]),v._v(" "),t("ul",[t("li",[v._v("判断地址合法性：合法段地址：(0，25K)，非法段地址：(0,35K)，因为段号0的段长最多只有30k")])])])])]),v._v(" "),t("li",[t("p",[v._v("段页式存储："),t("strong",[v._v("段式与页式的综合体。先分段，再分页。1个程序有若干个段，每个段中可以有若干页，每个页的大小相同，但每个段的大小不同")])]),v._v(" "),t("ul",[t("li",[v._v("优点：空间浪费小、存储共享容易、存储保护容易、能动态连接\n缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降")])])])]),v._v(" "),t("h3",{attrs:{id:"页面置换算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面置换算法"}},[v._v("#")]),v._v(" 页面置换算法（+）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("最优（Optimal，OPT)算法")])]),v._v(" "),t("li",[t("p",[v._v("随机（RAND）算法")])]),v._v(" "),t("li",[t("p",[v._v("先进先出（FIFO）算法：有可能产生“抖动”")])]),v._v(" "),t("li",[t("p",[v._v('最近最少使用（LRU）算法：不会“抖动”，LRU的理论依据是"局部性原理"')])]),v._v(" "),t("li",[t("p",[v._v("时间局部性：刚被访问的内容，立即又被访问")])]),v._v(" "),t("li",[t("p",[v._v("空间局部性：刚被访问的内容，临近的空间很快被访问")])]),v._v(" "),t("li",[t("p",[v._v("磁盘管理：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("存取时间=寻道时间+等待时间，寻道时间是指磁头移动到磁道所需的时间，等待时间为等待读写的扇区转到磁头下方所用的时间")])]),v._v(" "),t("li",[t("p",[v._v("磁盘调度算法")]),v._v(" "),t("ul",[t("li",[v._v("先来先服务（FCFS）")]),v._v(" "),t("li",[v._v("最短寻道时间优先（SSTF）")]),v._v(" "),t("li",[v._v("扫描算法（SCAN）：从里(外)向外(里)再从外(里)向里(外)扫 ///\\")]),v._v(" "),t("li",[v._v("循环扫描（CSCAN）算法：从里(外)向外(里)扫再突然回到里(外) ////")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("读取磁盘数据时间计算")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("读取磁盘数据的时间应包括以下三个部分：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("找磁道的时间")])]),v._v(" "),t("li",[t("p",[v._v("找块（扇区）的时间，即旋转延迟时间")])]),v._v(" "),t("li",[t("p",[v._v("传输时间")])])])]),v._v(" "),t("li",[t("p",[v._v("例题：某磁盘磁头从一个磁道移至另一个磁道需要10ms。文件在磁盘上非连续存放，逻辑上相邻数据块的平均移动距离为10个磁道，每块的旋转延迟时间及传输时间分别为100ms和2ms，则读取一个100次的文件需要__毫秒时间")]),v._v(" "),t("ul",[t("li",[v._v("A.10200 B.11000 C.11200 D.20200")]),v._v(" "),t("li",[v._v("((10×10)+100+2)×100")])])])])])])])]),v._v(" "),t("h2",{attrs:{id:"文件管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件管理"}},[v._v("#")]),v._v(" 文件管理")]),v._v(" "),t("h3",{attrs:{id:"绝对路径与相对路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绝对路径与相对路径"}},[v._v("#")]),v._v(" 绝对路径与相对路径（+++）")]),v._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"/ruankao.assets/%E6%A0%91%E5%BD%A2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png",alt:"树形目录结构"}}),v._v(" "),t("h3",{attrs:{id:"索引文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引文件"}},[v._v("#")]),v._v(" 索引文件（++）")]),v._v(" "),t("p",[t("img",{attrs:{src:"/ruankao.assets/%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg",alt:"索引文件结构"}})]),v._v(" "),t("h3",{attrs:{id:"位示图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位示图"}},[v._v("#")]),v._v(" 位示图（++）")]),v._v(" "),t("ul",[t("li",[v._v('位示图是利用二进制的一位来表示磁盘中的一个盘块的使用情况。当其值为“0”时，表示对应的盘块空闲；为“1”时，表示已经分配。有的系统把"0"作为盘块已分配的标记，把“1”作为空闲标志。(它们的本质上是相同的，都是用一位的两种状态标志空闲和已分配两种情况)磁盘上的所有盘块都有一个二进制位与之对应，这样，由所有盘块所对应的位构成一个集合，称为位示图')])]),v._v(" "),t("h2",{attrs:{id:"作业管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业管理"}},[v._v("#")]),v._v(" 作业管理")]),v._v(" "),t("p",[t("img",{attrs:{src:"/ruankao.assets/%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86.jpg",alt:"作业管理"}})]),v._v(" "),t("ul",[t("li",[v._v("作业调度算法\n"),t("ul",[t("li",[v._v("先来先服务法")]),v._v(" "),t("li",[v._v("时间片轮转发")]),v._v(" "),t("li",[v._v("短作业优先法")]),v._v(" "),t("li",[v._v("最高优先权优先法")]),v._v(" "),t("li",[v._v("高响应比优先法\n"),t("ul",[t("li",[v._v("等待时间 / 执行时间 = 响应比")])])])])])]),v._v(" "),t("h2",{attrs:{id:"设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设备管理"}},[v._v("#")]),v._v(" 设备管理")]),v._v(" "),t("ul",[t("li",[v._v("数据传输控制方式(从上往下效率越来越高)\n"),t("ul",[t("li",[v._v("程序控制(查询)方式：分为无条件传送和程序查询方式两种。方法简单，硬件开销小，但/O能力不高，严重影响CPU的利用率。")]),v._v(" "),t("li",[v._v("程序中断方式：与程序控制方式相比，中断方式因为CPU无需等待而提高了传输请求的响应速度")]),v._v(" "),t("li",[v._v("DMA方式：DMA方式是为了在"),t("strong",[v._v("主存与外设之间实现高速(不会影响CPU)、批量数据交换而设置的")]),v._v("。DMA方式比程序控制方式与中断方式都高效")]),v._v(" "),t("li",[v._v("调道方式")]),v._v(" "),t("li",[v._v("I/O处理机")])])])]),v._v(" "),t("h3",{attrs:{id:"虚设备与spooling技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚设备与spooling技术"}},[v._v("#")]),v._v(" 虚设备与SPOOLING技术（+）")]),v._v(" "),t("ul",[t("li",[v._v("SPOOLing是关于慢速字符设备如何与计算机主机交换信息的一种技术，通常称为“假脱发技术‘’")]),v._v(" "),t("li",[v._v("SPOOLing技术通过"),t("strong",[v._v("磁盘")]),v._v("实现")])]),v._v(" "),t("ol",[t("li",[v._v("对于多个输入设备")]),v._v(" "),t("li",[v._v("将输入的任务放到输入缓冲区当中")]),v._v(" "),t("li",[v._v("以输入进程，输入到输入井")]),v._v(" "),t("li",[v._v("再从输入井，依次的输出")])]),v._v(" "),t("ul",[t("li",[v._v("也就是说我们不需要以PV操作检查进程有没有开始，有没有做完")]),v._v(" "),t("li",[v._v("我们都将输入任务放到输入井中，然后从输入井依次输出任务")])])])}),[],!1,null,null,null);_.default=a.exports}}]);
=======
(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{475:function(v,_,t){"use strict";t.r(_);var l=t(20),a=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[v._v("#")]),v._v(" 操作系统")]),v._v(" "),t("h2",{attrs:{id:"进程管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[v._v("#")]),v._v(" 进程管理")]),v._v(" "),t("h3",{attrs:{id:"进程的状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态"}},[v._v("#")]),v._v(" 进程的状态（++）")]),v._v(" "),t("ul",[t("li",[v._v("进程是程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。它由程序块、进程控制块（PCB）和数据块三部分组成")]),v._v(" "),t("li",[v._v("进程与程序的区别：进程是程序的一次执行过程，没有程序就没有进程。程序是完成某个特定功能的一系列程序语句的集合，只要不被破坏，它就永远存在。程序是一个静态的概念，而进程是一个动态的概念，它由创建而产生，完成任务后因撤销而消亡;进程是系统进行资源分配和调度的独立单位，而程序不是")]),v._v(" "),t("li",[v._v("进程的状态分为：运行、就绪、等待（堵塞）")])]),v._v(" "),t("h3",{attrs:{id:"前趋图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前趋图"}},[v._v("#")]),v._v(" 前趋图（+++）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("画出下面6条语句的"),t("strong",[v._v("前趋图")]),v._v("（符号“:=”是赋值的意思）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("S1：a:=x + y;")])]),v._v(" "),t("li",[t("p",[v._v("S2：b:=z + 1;")])]),v._v(" "),t("li",[t("p",[v._v("S3：c:=a - b;")])]),v._v(" "),t("li",[t("p",[v._v("S4：e:=c + 1;")])]),v._v(" "),t("li",[t("p",[v._v("S5：f:=c + a;")])]),v._v(" "),t("li",[t("p",[v._v("S6：g:=e * f;")])]),v._v(" "),t("li",[t("p",[v._v("分析：")]),v._v(" "),t("ul",[t("li",[v._v("S1与S2可以并发执行，因为它们互不依赖；但是S3必须在a（S1）、b（S2）被赋值后才能执行，S4必须在c（S3）之后才能执行，S5必须在c（S3）被赋值后才能执行，S6必须在e（S4）、f（S5）被赋值后才能执行。")])])]),v._v(" "),t("li",[t("p",[v._v("答案：")]),v._v(" "),t("div",{staticClass:"language-mermaid line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("graph LR\nA((S1))--\x3eB((S3))\nC((S2))--\x3eB\nB--\x3eD((S5))\nB--\x3eE((S4))\nD--\x3eF((S6))\nE--\x3eF\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br")])])])])])]),v._v(" "),t("h3",{attrs:{id:"信号量与pv操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#信号量与pv操作"}},[v._v("#")]),v._v(" 信号量与PV操作（++++）")]),v._v(" "),t("ul",[t("li",[v._v("临界资源：各进程间需要互斥方式对其进行共享的资源，如打印机、磁带机等")]),v._v(" "),t("li",[v._v("临界区：每个进程中"),t("strong",[v._v("访问临界资源的那段代码称为临界区")])]),v._v(" "),t("li",[v._v("信号量：是一种特殊的变量")]),v._v(" "),t("li",[t("strong",[v._v("P是申请资源的操作，V是释放资源的操作")])]),v._v(" "),t("li",[t("strong",[v._v("P操作：")]),v._v(" "),t("ul",[t("li",[v._v("资源量S=S-1 -> 判断S<0，F则继续，T则放入阻塞进程队列")])])]),v._v(" "),t("li",[t("strong",[v._v("V操作：")]),v._v(" "),t("ul",[t("li",[v._v("资源量S=S+1 -> 判断S<=0，T则说明阻塞队列中还有需要唤醒的进程，于是从阻塞队列中唤醒一个进程，F则继续")])])]),v._v(" "),t("li",[v._v("多个进程共享一台打印机问题（"),t("strong",[v._v("互斥模型")]),v._v("）：\n"),t("ul",[t("li",[v._v("P(S); 使用打印机 V(S); 后续代码;")]),v._v(" "),t("li",[v._v("互斥信号量S的初值为1")])])]),v._v(" "),t("li",[v._v("单缓冲区（一次只有一个进程执行）生产者、消费者问题（"),t("strong",[v._v("同步模型")]),v._v("）：\n"),t("ul",[t("li",[v._v("生产者：生产一个产品; P(S1); 送产品到缓冲区; V(S2)告诉消费者消费;")]),v._v(" "),t("li",[v._v("消费者：P(S2); 从缓冲区取产品; V(S1)告诉生产者生产; 消费产品;")]),v._v(" "),t("li",[v._v("S1初值为1，S2初值为0，S1为生产者生产产品，S2代表消费者消费产品")])])])]),v._v(" "),t("h3",{attrs:{id:"死锁及银行家算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#死锁及银行家算法"}},[v._v("#")]),v._v(" 死锁及银行家算法（++++）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("死锁问题")]),v._v(" "),t("ul",[t("li",[v._v("进程管理是操作系统的核心，但如果设计不当，就会出现死锁的问题。如果一个进程在等待一件不可能发生的事，则进程就死锁了。而如果一个或多个进程产生死锁，就会造成系统死锁。")]),v._v(" "),t("li",[v._v("例：系统有5个进程：A、B、C、D、E。这5个进程都需要4个系统资源。如果系统至少有多少个资源，则不可能发生死锁\n"),t("ul",[t("li",[v._v("答案：进程数*(每个进程所需资源-1)+1")])])])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("死锁形成的四大条件：互斥、保持和等待、不可剥夺、环路等待")])])]),v._v(" "),t("li",[t("p",[v._v("银行家算法：分配资源的原则")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("当一个进程对资源的最大需求量不超过系统中的资源数时可以接纳该进程")])]),v._v(" "),t("li",[v._v("进程"),t("strong",[v._v("可以分期请求资源")]),v._v("，但请求的总数不能超过最大需求量")]),v._v(" "),t("li",[v._v("当系统现有的资源不能满足进程尚需资源数时，对进程的请求可以推迟分配，但总能使进程在有限的时间里得到资源")])])])]),v._v(" "),t("h2",{attrs:{id:"存储管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储管理"}},[v._v("#")]),v._v(" 存储管理")]),v._v(" "),t("h3",{attrs:{id:"段页式存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#段页式存储"}},[v._v("#")]),v._v(" 段页式存储（++++）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("页式存储："),t("strong",[v._v("将程序与内存均划分为同样大小的块，以页为单位将程序调入内存")])]),v._v(" "),t("ul",[t("li",[v._v("把逻辑地址空间划分为大小相等的若干页，页大小与块大小相等")]),v._v(" "),t("li",[t("strong",[v._v("逻辑地址=页号+页内地址")])]),v._v(" "),t("li",[t("strong",[v._v("物理地址=页帧号(物理块号)+页内地址")])]),v._v(" "),t("li",[v._v("优点：利用率高，碎片小，分配及管理简单")]),v._v(" "),t("li",[v._v("缺点：增加了系统开销，可能产生抖动现象")]),v._v(" "),t("li",[v._v("例如，页式存储系统中，每个页的大小为4KB\n"),t("ul",[t("li",[v._v("页表（页号，块号）：0,2 1,3 2,6 3,8...")]),v._v(" "),t("li",[v._v("逻辑地址：10 (1100 1101 1110)对应的物理地址为：110 1100 1101 1110")])])])])]),v._v(" "),t("li",[t("p",[v._v("段式存储："),t("strong",[v._v("按用户作业中的自然段来划分逻辑空间，然后调入内存，段的长度可以不一样")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("优点：多道程序共享内存，各段程序修改互不影响")])]),v._v(" "),t("li",[t("p",[v._v("缺点：内存利用率低，内存碎片浪费大")])]),v._v(" "),t("li",[t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[v._v("段号")]),v._v(" "),t("th",{staticStyle:{"text-align":"center"}},[v._v("段长")]),v._v(" "),t("th",{staticStyle:{"text-align":"center"}},[v._v("基址(起始地址)")])])]),v._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[v._v("0")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("30k")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("40k")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[v._v("1")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("20k")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("80k")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[v._v("2")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("15k")]),v._v(" "),t("td",{staticStyle:{"text-align":"center"}},[v._v("120k")])])])]),v._v(" "),t("ul",[t("li",[v._v("判断地址合法性：合法段地址：(0，25K)，非法段地址：(0,35K)，因为段号0的段长最多只有30k")])])])])]),v._v(" "),t("li",[t("p",[v._v("段页式存储："),t("strong",[v._v("段式与页式的综合体。先分段，再分页。1个程序有若干个段，每个段中可以有若干页，每个页的大小相同，但每个段的大小不同")])]),v._v(" "),t("ul",[t("li",[v._v("优点：空间浪费小、存储共享容易、存储保护容易、能动态连接\n缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降")])])])]),v._v(" "),t("h3",{attrs:{id:"页面置换算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面置换算法"}},[v._v("#")]),v._v(" 页面置换算法（+）")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("最优（Optimal，OPT)算法")])]),v._v(" "),t("li",[t("p",[v._v("随机（RAND）算法")])]),v._v(" "),t("li",[t("p",[v._v("先进先出（FIFO）算法：有可能产生“抖动”")])]),v._v(" "),t("li",[t("p",[v._v('最近最少使用（LRU）算法：不会“抖动”，LRU的理论依据是"局部性原理"')])]),v._v(" "),t("li",[t("p",[v._v("时间局部性：刚被访问的内容，立即又被访问")])]),v._v(" "),t("li",[t("p",[v._v("空间局部性：刚被访问的内容，临近的空间很快被访问")])]),v._v(" "),t("li",[t("p",[v._v("磁盘管理：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("存取时间=寻道时间+等待时间，寻道时间是指磁头移动到磁道所需的时间，等待时间为等待读写的扇区转到磁头下方所用的时间")])]),v._v(" "),t("li",[t("p",[v._v("磁盘调度算法")]),v._v(" "),t("ul",[t("li",[v._v("先来先服务（FCFS）")]),v._v(" "),t("li",[v._v("最短寻道时间优先（SSTF）")]),v._v(" "),t("li",[v._v("扫描算法（SCAN）：从里(外)向外(里)再从外(里)向里(外)扫 ///\\")]),v._v(" "),t("li",[v._v("循环扫描（CSCAN）算法：从里(外)向外(里)扫再突然回到里(外) ////")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("读取磁盘数据时间计算")])]),v._v(" "),t("ul",[t("li",[t("p",[v._v("读取磁盘数据的时间应包括以下三个部分：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("找磁道的时间")])]),v._v(" "),t("li",[t("p",[v._v("找块（扇区）的时间，即旋转延迟时间")])]),v._v(" "),t("li",[t("p",[v._v("传输时间")])])])]),v._v(" "),t("li",[t("p",[v._v("例题：某磁盘磁头从一个磁道移至另一个磁道需要10ms。文件在磁盘上非连续存放，逻辑上相邻数据块的平均移动距离为10个磁道，每块的旋转延迟时间及传输时间分别为100ms和2ms，则读取一个100次的文件需要__毫秒时间")]),v._v(" "),t("ul",[t("li",[v._v("A.10200 B.11000 C.11200 D.20200")]),v._v(" "),t("li",[v._v("((10×10)+100+2)×100")])])])])])])])]),v._v(" "),t("h2",{attrs:{id:"文件管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件管理"}},[v._v("#")]),v._v(" 文件管理")]),v._v(" "),t("h3",{attrs:{id:"绝对路径与相对路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绝对路径与相对路径"}},[v._v("#")]),v._v(" 绝对路径与相对路径（+++）")]),v._v(" "),t("img",{staticStyle:{zoom:"80%"},attrs:{src:"/ruankao.assets/%E6%A0%91%E5%BD%A2%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png",alt:"树形目录结构"}}),v._v(" "),t("h3",{attrs:{id:"索引文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#索引文件"}},[v._v("#")]),v._v(" 索引文件（++）")]),v._v(" "),t("p",[t("img",{attrs:{src:"/ruankao.assets/%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.jpg",alt:"索引文件结构"}})]),v._v(" "),t("h3",{attrs:{id:"位示图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位示图"}},[v._v("#")]),v._v(" 位示图（++）")]),v._v(" "),t("ul",[t("li",[v._v('位示图是利用二进制的一位来表示磁盘中的一个盘块的使用情况。当其值为“0”时，表示对应的盘块空闲；为“1”时，表示已经分配。有的系统把"0"作为盘块已分配的标记，把“1”作为空闲标志。(它们的本质上是相同的，都是用一位的两种状态标志空闲和已分配两种情况)磁盘上的所有盘块都有一个二进制位与之对应，这样，由所有盘块所对应的位构成一个集合，称为位示图')])]),v._v(" "),t("h2",{attrs:{id:"作业管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业管理"}},[v._v("#")]),v._v(" 作业管理")]),v._v(" "),t("p",[t("img",{attrs:{src:"/ruankao.assets/%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86.jpg",alt:"作业管理"}})]),v._v(" "),t("ul",[t("li",[v._v("作业调度算法\n"),t("ul",[t("li",[v._v("先来先服务法")]),v._v(" "),t("li",[v._v("时间片轮转发")]),v._v(" "),t("li",[v._v("短作业优先法")]),v._v(" "),t("li",[v._v("最高优先权优先法")]),v._v(" "),t("li",[v._v("高响应比优先法\n"),t("ul",[t("li",[v._v("等待时间 / 执行时间 = 响应比")])])])])])]),v._v(" "),t("h2",{attrs:{id:"设备管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设备管理"}},[v._v("#")]),v._v(" 设备管理")]),v._v(" "),t("ul",[t("li",[v._v("数据传输控制方式(从上往下效率越来越高)\n"),t("ul",[t("li",[v._v("程序控制(查询)方式：分为无条件传送和程序查询方式两种。方法简单，硬件开销小，但/O能力不高，严重影响CPU的利用率。")]),v._v(" "),t("li",[v._v("程序中断方式：与程序控制方式相比，中断方式因为CPU无需等待而提高了传输请求的响应速度")]),v._v(" "),t("li",[v._v("DMA方式：DMA方式是为了在"),t("strong",[v._v("主存与外设之间实现高速(不会影响CPU)、批量数据交换而设置的")]),v._v("。DMA方式比程序控制方式与中断方式都高效")]),v._v(" "),t("li",[v._v("调道方式")]),v._v(" "),t("li",[v._v("I/O处理机")])])])]),v._v(" "),t("h3",{attrs:{id:"虚设备与spooling技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚设备与spooling技术"}},[v._v("#")]),v._v(" 虚设备与SPOOLING技术（+）")]),v._v(" "),t("ul",[t("li",[v._v("SPOOLing是关于慢速字符设备如何与计算机主机交换信息的一种技术，通常称为“假脱发技术‘’")]),v._v(" "),t("li",[v._v("SPOOLing技术通过"),t("strong",[v._v("磁盘")]),v._v("实现")])]),v._v(" "),t("ol",[t("li",[v._v("对于多个输入设备")]),v._v(" "),t("li",[v._v("将输入的任务放到输入缓冲区当中")]),v._v(" "),t("li",[v._v("以输入进程，输入到输入井")]),v._v(" "),t("li",[v._v("再从输入井，依次的输出")])]),v._v(" "),t("ul",[t("li",[v._v("也就是说我们不需要以PV操作检查进程有没有开始，有没有做完")]),v._v(" "),t("li",[v._v("我们都将输入任务放到输入井中，然后从输入井依次输出任务")])])])}),[],!1,null,null,null);_.default=a.exports}}]);
>>>>>>> ceefd0189b2bd0e88ffb3c6b673e7aa07f62c12c:assets/js/35.009001ea.js
